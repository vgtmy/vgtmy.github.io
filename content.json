{"meta":{"title":"光阴的故事","subtitle":"The","description":"在时光中行走，于故事中停留","author":"二郎神表弟","url":"https://vgtmy.github.io","root":"/"},"pages":[{"title":"about","date":"2025-05-22T05:00:12.000Z","updated":"2025-05-24T14:01:01.197Z","comments":false,"path":"about/index.html","permalink":"https://vgtmy.github.io/about/index.html","excerpt":"","text":""}],"posts":[{"title":"博客部署到阿里云+GitHub自动部署全流程指南","slug":"博客部署到阿里云-GitHub自动部署全流程指南","date":"2025-05-26T07:01:50.000Z","updated":"2025-05-26T11:18:01.883Z","comments":true,"path":"2025/05/26/博客部署到阿里云-GitHub自动部署全流程指南/","permalink":"https://vgtmy.github.io/2025/05/26/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91-GitHub%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%85%A8%E6%B5%81%E7%A8%8B%E6%8C%87%E5%8D%97/","excerpt":"将 Hexo 博客部署到阿里云服务器的完整流程如下，我们会从本地部署到服务器、配置域名、开放端口、防火墙、安全组等步骤一步一步来，适合初学者。","text":"将 Hexo 博客部署到阿里云服务器的完整流程如下，我们会从本地部署到服务器、配置域名、开放端口、防火墙、安全组等步骤一步一步来，适合初学者。 博客部署到阿里云🧱 一、前提准备你已经有这些资源： 本地 Hexo 博客（可以正常 hexo s 预览） 一台阿里云服务器（IP 是 47.111.124.118） 一个域名 vgtmy.com（在阿里云买的） 我们将做的事情是： 把本地 Hexo 的静态文件传到服务器 用 Nginx 做网页服务器，部署 Hexo 到公网 配置阿里云服务器的防火墙和安全组 把域名 vgtmy.com 解析到你的服务器 🧰 二、安装和准备环境1. 本地打包博客在本地 Hexo 根目录下运行： 12hexo cleanhexo g 生成好的静态文件会在 public/ 目录下。 2. 连接你的阿里云服务器（使用 SSH）在终端连接服务器： 1ssh root@47.111.124.118 （第一次登录会提示是否确认，输入 yes） 3. 安装 Nginx（在服务器上）1234# 更新系统apt update &amp;&amp; apt upgrade -y # 如果是 Ubuntu 系统# 安装 Nginxapt install nginx -y 🚚 三、部署 Hexo 到服务器1. 使用 scp 上传 public/ 文件夹到服务器在本地终端（Hexo 根目录下）运行： 1scp -r ./public/* root@47.111.124.118:/var/www/html/ /var/www/html/ 是 Nginx 默认的网站根目录。 2. 重启 Nginx在服务器上： 1systemctl restart nginx 然后在浏览器访问： 1http://47.111.124.118 你应该就能看到博客了！ 🔐 四、设置阿里云防火墙与安全组登录阿里云控制台： 1. 打开服务器的 80 端口（HTTP） 进入【云服务器 ECS】 找到你的实例，点击【安全组】 点击【配置规则】&gt;【添加安全组规则】 协议类型：TCP 端口范围：80 授权对象：0.0.0.0&#x2F;0 备注：开放网页访问 保存即可。 🌐 五、配置域名解析（vgtmy.com）登录阿里云【域名控制台】： 找到你的域名 vgtmy.com 进入【解析】页面，添加解析记录： 类型 主机记录 记录值 线路 A @ 47.111.124.118 默认线路 如果你想让 www.vgtmy.com 也能访问： 类型 主机记录 记录值 线路 A www 47.111.124.118 默认线路 🧪 六、访问网站解析通常需要几分钟到一小时不等。 你可以打开浏览器访问： 1http://vgtmy.com 或者： 1http://www.vgtmy.com 就能看到你的博客上线了！ 配置 HTTPS我们现在来为你的 Hexo 博客配置 HTTPS（SSL证书），让访问 https://vgtmy.com 更安全、专业。 🛠️ 一、申请免费 SSL 证书（阿里云） 打开阿里云控制台：https://yundun.console.aliyun.com 左侧进入 SSL证书管理 点击【免费证书申请】 填写如下内容： 证书品牌：阿里云 域名类型：单域名 域名：vgtmy.com 选择 DNS 验证或 文件验证（推荐 DNS） ✅ 如果选择 DNS 验证： 系统会提示你添加一条解析记录（如 _dnsauth.vgtmy.com → 某个字符串） 回到域名解析控制台，添加这条记录 验证成功后，证书会在十几分钟内签发完成 💾 二、下载证书并上传到服务器签发完成后： 在阿里云证书控制台中点击“下载” 选择服务器类型：Nginx 下载压缩包（里面有两个文件，可能是 .pem 和 .key） 然后：将证书上传到服务器，比如 /etc/nginx/ssl/ 目录： 123mkdir -p /etc/nginx/sslscp yourdomain.pem root@47.111.124.118:/etc/nginx/ssl/scp yourdomain.key root@47.111.124.118:/etc/nginx/ssl/ ⚙️ 三、配置 Nginx 启用 HTTPS编辑你的 Nginx 配置文件： 1nano /etc/nginx/sites-available/default 把内容修改如下（或追加 SSL 配置）： 12345678910111213141516171819202122server &#123; listen 80; server_name vgtmy.com www.vgtmy.com; # 自动跳转到 https return 301 https://$host$request_uri;&#125;server &#123; listen 443 ssl; server_name vgtmy.com www.vgtmy.com; ssl_certificate /etc/nginx/ssl/yourdomain.pem; ssl_certificate_key /etc/nginx/ssl/yourdomain.key; root /var/www/html; index index.html; location / &#123; try_files $uri $uri/ =404; &#125;&#125; 请根据你证书文件名替换 yourdomain.pem 和 yourdomain.key。 🔄 四、重启 Nginx 服务12nginx -t # 检查配置有没有错systemctl reload nginx ✅ 五、访问测试现在你可以访问： 1https://vgtmy.com 如果看到小锁🔒图标，说明 HTTPS 配置成功啦！ 自动续签（Let’s Encrypt）阿里云免费证书不能自动续期，90天过期。你也可以使用 Let’s Encrypt 来实现自动续期，我可以帮你搭配 certbot 安装。 ✅ 一、使用 Let’s Encrypt 配置 HTTPS（自动续签）我们将使用工具 certbot 自动申请证书并配置 Nginx。 🛠️ 步骤 1：安装 Certbot 工具在你的阿里云服务器上运行以下命令： 12apt updateapt install certbot python3-certbot-nginx -y 🌐 步骤 2：确保域名已经解析成功你已经把 vgtmy.com 和 www.vgtmy.com 指向了你的服务器 47.111.124.118，请确认它们已经能通过浏览器访问。 确认成功后继续。 🔐 步骤 3：使用 Certbot 自动申请证书并配置 Nginx在服务器上执行： 1certbot --nginx 然后它会一步步引导你： 选择你要申请证书的域名（输入对应编号） 是否重定向 HTTP 到 HTTPS？选择 2（自动重定向） 如果你看到这类提示： 1Congratulations! Your certificate and chain have been saved at... 说明证书申请成功并自动配置到了 Nginx。 🔄 步骤 4：自动续期任务确认Certbot 默认会自动添加续期任务（通过 cron 或 systemd 定时执行），你可以手动测试一次是否成功： 1certbot renew --dry-run 输出没有报错就是 OK 的，证书将在每 60 天自动更新一次。 ✅ 最终效果验证现在打开你的域名： 1https://vgtmy.com 你应该可以看到： 页面正常加载 地址栏出现 🔒 安全锁图标 支持 HTTPS，自动跳转 HTTP → HTTPS GitHub Actions 自动部署要实现 Hexo 博客通过 GitHub 自动部署（CI&#x2F;CD）到你的阿里云服务器，我们可以通过 GitHub Actions 实现一个完整的自动部署流程： 🧠 目标效果是：你只要把博客内容推送到 GitHub，GitHub Actions 就自动构建并将生成的博客上传到你的阿里云服务器，自动上线！ 🧱 一、准备条件✅ 你需要有： Hexo 博客项目已托管到 GitHub，例如 https://github.com/yourname/hexo-blog 阿里云服务器的 SSH 登录信息（IP、用户名、密码或密钥） 确保服务器已部署好 Nginx 并指向 /var/www/html 🛠️ 二、在 GitHub 上配置 SSH 密钥（推荐用密钥方式）1. 在你本地生成 SSH 密钥（如果还没有）1ssh-keygen -t rsa -b 4096 -C &quot;deploy@hexo&quot; 一路回车，默认保存在 ~/.ssh/id_rsa 和 ~/.ssh/id_rsa.pub 2. 把公钥复制到你的服务器1ssh-copy-id -i ~/.ssh/id_rsa.pub root@47.111.124.118 现在你应该可以免密登录服务器： 1ssh root@47.111.124.118 3. 把私钥添加到 GitHub 仓库的 Secrets 打开你的 GitHub 仓库页面 点击【Settings】&gt;【Secrets and variables】&gt;【Actions】 新增两个 Secrets： Name Value SERVER_SSH_KEY 你本地生成的私钥内容（~/.ssh/id_rsa 的内容） SERVER_HOST 47.111.124.118 SERVER_USERNAME root（或你设置的用户） 📁 三、添加 GitHub Actions 工作流配置在你的 Hexo 项目根目录新建文件： 12mkdir -p .github/workflowsnano .github/workflows/deploy.yml 填入以下内容： 123456789101112131415161718192021222324252627282930313233343536name: Hexo Deploy to Aliyunon: push: branches: - main # 根据你的默认分支调整，如是 master 就改成 masterjobs: build-and-deploy: runs-on: ubuntu-latest steps: - name: Checkout repository uses: actions/checkout@v3 - name: Setup Node.js uses: actions/setup-node@v3 with: node-version: &#x27;18&#x27; - name: Install dependencies run: | npm install -g hexo-cli npm install - name: Generate static files run: hexo generate - name: Deploy to server via SSH uses: appleboy/scp-action@master with: host: $&#123;&#123; secrets.SERVER_HOST &#125;&#125; username: $&#123;&#123; secrets.SERVER_USERNAME &#125;&#125; key: $&#123;&#123; secrets.SERVER_SSH_KEY &#125;&#125; source: &quot;public/*&quot; target: &quot;/var/www/html/&quot; ✅ 四、测试部署流程 将更改推送到 GitHub： 123git add .git commit -m &quot;Add GitHub Actions deploy&quot;git push 打开 GitHub 仓库，进入【Actions】页面，查看 CI 是否成功执行 等待构建 + 部署成功后，访问你的博客： 1https://vgtmy.com 博客应已自动更新！ 🔁 五、未来如何部署？你只需在本地写好文章、提交并推送到 GitHub： 12345hexo new post &quot;xxx&quot;# 编辑文章...git add .git commit -m &quot;update post&quot;git push 博客就会自动构建并部署上线！ 📦 六、可选优化（推荐） 支持多环境构建（如测试&#x2F;正式） 压缩图片、清理缓存等自动优化 添加构建状态徽章 配合 Cloudflare 的缓存刷新自动执行 优化构建与部署流程很好！我们接下来来进行 优化构建与部署流程，让你的 Hexo 博客部署更智能、高效。主要包括以下几个增强： ✅ 一、自动压缩优化构建（图片压缩 + 清理）我们可以在 GitHub Actions 中加入构建优化步骤，让生成的静态文件更轻量、更快。 1. 安装优化插件（本地先装一次）1npm install hexo-neat --save 然后在 Hexo 配置文件 _config.yml 中添加： 1234567891011neat_html: enable: true exclude:neat_css: enable: true exclude:neat_js: enable: true mangle: true output: beautify: false 这样会自动压缩 HTML&#x2F;CSS&#x2F;JS，大幅减少页面体积。 ✅ 二、自动刷新 Cloudflare CDN 缓存（可选）如果你启用了 Cloudflare CDN，加速效果会非常好。但部署更新后可能访问的还是缓存的旧页面，因此我们可以通过 GitHub Actions 自动刷新缓存！ 1. 获取 Cloudflare API Token 登录 Cloudflare 控制台 进入个人设置 → API Tokens → 创建 Token 模板选择 “Purge Everything” 设置权限： Zone.Zone:Read Zone.Cache Purge:Edit 限定你当前域名 vgtmy.com 生成后保存你的 API Token。 2. 添加 Secrets 到 GitHub 仓库前往 GitHub 仓库设置： Name Value CF_ZONE_ID 你的 Cloudflare 区域 ID CF_API_TOKEN 上面生成的 API Token 你可以在 Cloudflare 控制台中找到 Zone ID（在域名首页信息栏里） 3. 修改 deploy.yml 添加刷新 CDN 步骤123456- name: Purge Cloudflare Cache run: | curl -X POST &quot;https://api.cloudflare.com/client/v4/zones/$&#123;&#123; secrets.CF_ZONE_ID &#125;&#125;/purge_cache&quot; \\ -H &quot;Authorization: Bearer $&#123;&#123; secrets.CF_API_TOKEN &#125;&#125;&quot; \\ -H &quot;Content-Type: application/json&quot; \\ --data &#x27;&#123;&quot;purge_everything&quot;:true&#125;&#x27; 添加在部署成功之后即可。 ✅ 三、完整部署工作流模板（最终版）这是一个完整 CI&#x2F;CD 工作流文件，具备构建优化、部署、刷新 Cloudflare 缓存的功能： 12345678910111213141516171819202122232425262728293031323334353637383940414243name: Hexo Deployon: push: branches: - mainjobs: build-and-deploy: runs-on: ubuntu-latest steps: - name: Checkout repo uses: actions/checkout@v3 - name: Setup Node.js uses: actions/setup-node@v3 with: node-version: &#x27;18&#x27; - name: Install dependencies run: | npm install -g hexo-cli npm install - name: Generate optimized static files run: hexo clean &amp;&amp; hexo generate - name: Deploy to server via SSH uses: appleboy/scp-action@master with: host: $&#123;&#123; secrets.SERVER_HOST &#125;&#125; username: $&#123;&#123; secrets.SERVER_USERNAME &#125;&#125; key: $&#123;&#123; secrets.SERVER_SSH_KEY &#125;&#125; source: &quot;public/*&quot; target: &quot;/var/www/html/&quot; - name: Purge Cloudflare Cache run: | curl -X POST &quot;https://api.cloudflare.com/client/v4/zones/$&#123;&#123; secrets.CF_ZONE_ID &#125;&#125;/purge_cache&quot; \\ -H &quot;Authorization: Bearer $&#123;&#123; secrets.CF_API_TOKEN &#125;&#125;&quot; \\ -H &quot;Content-Type: application/json&quot; \\ --data &#x27;&#123;&quot;purge_everything&quot;:true&#125;&#x27; 🔄 四、现在你拥有的是： 💻 一套完整的 Hexo 博客源码在 GitHub 上管理 ⚙️ 自动构建压缩优化后的静态页面 🚀 自动部署到阿里云服务器 ☁️ 自动刷新 Cloudflare CDN 缓存 🔐 支持 HTTPS + 自动续签","categories":[{"name":"学习心得","slug":"学习心得","permalink":"https://vgtmy.github.io/categories/%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://vgtmy.github.io/tags/hexo/"},{"name":"阿里云","slug":"阿里云","permalink":"https://vgtmy.github.io/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"},{"name":"GitHub","slug":"GitHub","permalink":"https://vgtmy.github.io/tags/GitHub/"},{"name":"博客","slug":"博客","permalink":"https://vgtmy.github.io/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"自动部署","slug":"自动部署","permalink":"https://vgtmy.github.io/tags/%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"},{"name":"CI/CD","slug":"CI-CD","permalink":"https://vgtmy.github.io/tags/CI-CD/"},{"name":"Https","slug":"Https","permalink":"https://vgtmy.github.io/tags/Https/"}]},{"title":"搭建Git代码仓库：代码版本控制与托管指南","slug":"搭建Git代码仓库","date":"2025-05-25T07:12:01.000Z","updated":"2025-05-25T07:26:11.603Z","comments":true,"path":"2025/05/25/搭建Git代码仓库/","permalink":"https://vgtmy.github.io/2025/05/25/%E6%90%AD%E5%BB%BAGit%E4%BB%A3%E7%A0%81%E4%BB%93%E5%BA%93/","excerpt":"","text":"Git、Gitea 和 TortoiseGit：代码版本控制与托管指南本文将介绍 Git 分布式版本控制系统，轻量级的自建 Git 服务 Gitea，以及 Git 的 Windows GUI 客户端 TortoiseGit。我们将探讨它们各自的功能、如何进行安装，以及如何将它们结合起来，为您的代码提供版本控制和集中托管。 1. Git：分布式版本控制的核心Git 是一个开源的分布式版本控制软件，由 Linus Torvalds 设计开发，最初用于管理 Linux 内核开发。Git 的主要工作是创建和保存您项目的快照，并与之后的快照进行对比。它能够有效、高速地处理从很小到非常大的项目版本管理。 Git 的工作区、暂存区和版本库理解 Git 的关键在于了解其三种文件状态及其交互方式: 工作目录 (Working Directory &#x2F; workspace)：这是您在本地计算机上看到的项目文件。您实际操作文件（查看、编辑、删除、创建）的地方就是工作目录。所有对文件的更改首先发生在这里。工作目录中的文件可能有未跟踪 (Untracked)（新创建，未被 Git 记录）或已修改 (Modified)（已被 Git 跟踪但更改未提交）状态。 暂存区 (Staging Area &#x2F; 索引 Index)：这是一个临时存储区域，用于保存即将提交到本地仓库的更改。您可以选择性地将工作目录中的更改添加到暂存区，以便一次提交多个文件的更改。git add &lt;filename&gt; 命令用于将指定文件添加到暂存区，而 git add . 命令则用于将当前目录下的所有更改添加到暂存区。文件在暂存区时处于已暂存 (Staged) 状态。 本地仓库 (Local Repository &#x2F; 版本库)：这是一个隐藏在 .git 目录中的数据库，用于存储项目的所有提交历史记录。每次提交更改时，Git 会将暂存区的内容保存到本地仓库中。git commit -m &quot;commit message&quot; 命令用于将暂存区中的更改提交到本地仓库。文件提交到本地仓库后，状态通常返回已跟踪 (Tracked)。 远程仓库 (remote repository)：代码托管在远程服务器上的仓库副本。 Git 文件状态转换流程文件状态的转换通常遵循以下流程： 未跟踪 (Untracked)：新创建的文件最初是未跟踪的，它们存在于工作目录中，但未被 Git 跟踪。使用 touch newfile.txt 创建文件后，git status 会显示其为未跟踪。 已跟踪 (Tracked)：通过 git add 命令将未跟踪的文件添加到暂存区后，文件变为已跟踪状态。git add newfile.txt 命令可以将文件添加到暂存区，此时 git status 会显示该文件已暂存。 已修改 (Modified)：对已跟踪的文件进行更改后，这些更改会显示为已修改状态，但这些更改还未添加到暂存区。例如，使用 echo &quot;Hello, World!&quot; &gt; newfile.txt 修改文件后，git status 会显示文件已修改。 已暂存 (Staged)：使用 git add 命令将修改过的文件添加到暂存区后，文件进入已暂存状态，等待提交。 已提交 (Committed)：使用 git commit 命令将暂存区的更改提交到本地仓库后，这些更改被记录下来，文件状态返回为已跟踪状态。例如，git commit -m &quot;Added newfile.txt&quot; 提交后，git status 会显示工作目录干净。 Git 基本操作命令这里列出一些 Git 的常用命令: git init: 初始化仓库。 git clone &lt;repository&gt;: 拷贝一份远程仓库，也就是下载一个项目。克隆本地仓库时，命令格式为 git clone &lt;source repository&gt; &lt;destination repository&gt;，目标目录必须未创建或为空。 git status: 查看仓库当前的状态，显示有变更的文件。git status -s 可获得简短状态输出。 git add &lt;file&gt;: 添加文件到暂存区。 git add .: 添加当前目录下所有更改过的文件至暂存区。 git commit -m &quot;message&quot;: 提交暂存区到本地仓库。 git commit -am &quot;message&quot;: 将 add 和 commit 合为一步，直接提交全部已跟踪文件的修改。注意，新建的未跟踪文件不会被提交。 git push: 将本地库中的最新信息发送给远程库。例如 git push origin master 将当前分支推送到远程 master 分支。 git pull: 从远程获取最新版本到本地，并自动合并。git pull 相当于 git fetch + git merge。 git fetch: 从远程获取最新版本到本地，不会自动合并。 git merge: 用于从指定的 commit 合并到当前分支。 git checkout: 分支切换。也可用于从暂存区域复制文件到工作目录，丢弃本地修改 (git checkout -- &lt;files&gt;)。 git diff: 比较工作区与暂存区的不同。还有多种用法，如比较暂存区与指定提交版本的不同 (git diff --cached [&lt;commit&gt;])，工作区与指定提交版本的不同 (git diff &lt;commit&gt;)，或两个提交版本之间的不同 (git diff &lt;commit&gt;..&lt;commit&gt;)。 git log: 查看历史提交记录。 git reset: 回退版本。git reset --hard HEAD 将当前版本重置为 HEAD。也可用于撤销最后一次 git add。 git rm &lt;file&gt;: 将文件从暂存区和工作区中删除。使用 --cached 只从暂存区中删除。 git mv &lt;source&gt; &lt;destination&gt;: 移动或重命名工作区文件。 要使用 Git，您需要在本地计算机上安装 Git 软件。具体的安装步骤未在源中详细说明，但通常需要从 Git 官方网站下载适用于您操作系统的安装程序。 2. Gitea：您的轻量级自建 Git 服务器Gitea 是一个轻量级的 DevOps 平台软件。它能够帮助团队和开发者高效轻松地处理软件生命周期中的工作，包括 Git 托管、代码审查、团队协作、软件包注册和 CI&#x2F;CD。Gitea 与 GitHub、Bitbucket 和 GitLab 等比较类似。 Gitea 的首要目标是创建一个极易安装、运行快速、安装和使用体验良好的自建 Git 服务。它采用 Go 作为后端语言，只需生成一个可执行程序即可，支持 Linux, macOS 和 Windows 等多平台及主流架构。 Gitea 的主要功能特性包括: 代码托管：支持创建和管理仓库、浏览历史、代码文件、审查和合并代码提交、管理协作者和分支等。 轻量级和快速：设计目标之一是轻量级和快速响应，性能出色，适用于资源有限的环境。 易于部署和维护：轻松部署在各种服务器上，不需要复杂的配置和依赖。 安全性：提供用户权限管理、访问控制列表等功能。 代码评审：支持 Pull Request workflow 和 AGit workflow，评审人可以在线浏览代码并提交意见。 CI&#x2F;CD：Gitea Actions 支持 CI&#x2F;CD 功能，兼容 GitHub Actions。 项目管理：通过看板和工单跟踪项目需求、功能和 bug。 制品库：支持超过 20 种不同的软件包管理。 开源社区支持：基于 MIT 许可证的开源项目，拥有活跃社区。 多语言支持：提供多种语言界面。 使用 Docker 安装 Gitea通过 Docker 安装 Gitea 是一个推荐的方式。Gitea 在其 Docker Hub 组织内提供自动更新的 Docker 镜像。通常建议使用 docker-compose 进行设置。 以下是一个基于 docker-compose.yml 的基本设置示例，使用 SQLite3 数据库： 12345678910111213141516171819202122version: &quot;3&quot;networks: gitea: external: falseservices: server: image: docker.gitea.com/gitea:1.23.8 # 推荐使用稳定版本标签 container_name: gitea environment: - USER_UID=1000 # 需要与 /data 卷所有者的 UID/GID 匹配（主机卷） - USER_GID=1000 # 对于命名卷则不需要担心权限问题 restart: always networks: - gitea volumes: - ./gitea:/data # 将主机当前目录下的 gitea 目录映射到容器的 /data # 或使用命名卷: - gitea:/data (需在顶层定义 volumes: gitea: driver: local) - /etc/timezone:/etc/timezone:ro - /etc/localtime:/etc/localtime:ro ports: - &quot;3000:3000&quot; # Web UI 端口映射 - &quot;222:22&quot; # SSH 端口映射 您可以根据需要修改端口映射，只需更改主机端口即可。 使用 MySQL 或 PostgreSQL 数据库 您可以修改 docker-compose.yml 以使用外部数据库，例如 MySQL 或 PostgreSQL。这通常涉及添加一个数据库服务，并在 Gitea 服务中配置相应的环境变量 (GITEA__database__DB_TYPE, GITEA__database__HOST, GITEA__database__NAME, GITEA__database__USER, GITEA__database__PASSWD) 和 depends_on。 启动与安装 在包含 docker-compose.yml 文件的目录中执行 docker-compose up -d 即可在后台启动 Gitea。使用 docker-compose ps 查看状态，docker-compose logs 查看日志。要关闭，执行 docker-compose down。 启动后，通过浏览器访问 http://server-ip:3000 (或您配置的其他端口) 完成安装向导。如果在 docker-compose 中启动了数据库服务，数据库主机名应填写 db。 配置 Gitea 的许多设置可以通过环境变量配置。环境变量的形式通常为 GITEA__SECTION_NAME__KEY_NAME。您也可以手动生成 SECRET_KEY 和 INTERNAL_TOKEN 并作为环境变量设置。配置文件 app.ini 安装后会保存在 /data/gitea/conf/ 目录中。 SSH 容器直通 如果需要在容器内运行 SSH，可能需要设置 SSH 容器直通。这涉及在主机上创建一个与容器内 Gitea 用户 UID&#x2F;GID 相同的用户，挂载主机的 .ssh 目录到容器，创建主机 SSH 密钥对，并在主机上设置一个脚本将 SSH 请求转发到容器的 SSH 端口，同时修改主机的 authorized_keys 文件。将容器的 SSH 端口（22）映射到主机上的非标准端口（例如 2222）是一种方法，可以将端口映射到主机的 localhost (如 127.0.0.1:2222:22) 以便不对外暴露。 创建 Gitea 操作用户如果需要将 Gitea 与 Jenkins 等工具对接以拉取代码，通常需要在 Gitea 中创建一个专门的用户。对于 http(s) 协议，需要用户名和密码；对于 ssh 协议，需要将本地 ssh 公钥提交到 Gitea 服务器。 创建用户的步骤（需要管理员权限）: 进入 Gitea 管理后台 -&gt; 帐户管理页面 (&lt;your gitea server&gt;/admin/users)。 点击右上角“创建新帐户”按钮。 填写用户名（例如 devops-bot），认证源选择本地。 去掉“要求用户更改密码”的勾选，确保客户端可以使用设置的密码登录。 用户创建后，可能需要再次编辑将其设置为管理员或授予相应仓库的访问权限。 为了让用户访问仓库，需要进行授权。一种方式是将用户添加到组织中的团队，并授予团队对仓库的权限（例如对所有仓库拥有管理权限）。 3. TortoiseGit：Windows 上的 Git GUI 客户端TortoiseGit 是一个 Git 的图形化界面客户端，特别是在 Windows 系统上。它可以帮助不熟悉命令行或偏好 GUI 操作的用户更方便地使用 Git 功能。 源中并未提供 TortoiseGit 的详细安装步骤，但通常需要从官方网站下载安装程序并进行安装。 TortoiseGit 基本操作TortoiseGit 通过文件浏览器右键菜单提供 Git 操作。以下是使用 TortoiseGit 执行一些基本 Git 操作的示例: 建立仓库：可以通过 git init 方式 (在目录右键点击 Git Create repository here) 或 git clone 方式 (右键点击 Git Clone，填写远程仓库 URL 和本地目录) 来建立仓库。 提交代码：在新文件或修改过的文件上右键，选择添加到暂存区 (add to cache)，然后再次右键选择提交到版本库 (commit)。填写提交信息并勾选文件后点击 commit。提交到本地版本库后，可以右键点击 push 推送到远程仓库。 更新代码：右键点击 pull 从远程仓库更新代码。 回滚版本：右键点击 show log 查看日志，选中某个版本右键点击 Reset master to this 进行版本回滚。 显示日志：右键点击 show log 即可查看提交历史。 创建分支：右键点击 Create Branch 创建新分支。创建后可以切换到新分支。 解决冲突：当 push 或 pull 发生冲突时，文件会显示感叹号图标。右键点击 Edit conflicts 进入冲突编辑界面，手动合并代码后点击 Mark as resolved。 忽略文件上传：创建 .gitignore 文件，并在其中定义不希望上传的文件（例如 target.txt）。 设置比较工具：可以设置 Beyond Compare 等外部工具作为比较工具。 4. Git、Gitea 和 TortoiseGit 的相互应用这三款工具结合使用可以构建一个完整的代码版本控制和托管环境： Git 作为核心：Git 是底层的版本控制系统。所有的版本跟踪、提交、分支、合并等操作都是基于 Git 完成的。 Gitea 作为远程仓库：Gitea 提供了一个中心化的平台来托管您的 Git 仓库。这使得团队协作、代码共享、代码审查和持续集成&#x2F;部署成为可能。您可以将本地 Git 仓库推送到 Gitea，也可以从 Gitea 克隆仓库到本地。 TortoiseGit 作为客户端：TortoiseGit 提供了一个友好的图形界面，让您在 Windows 上更轻松地执行 Git 操作。您可以使用 TortoiseGit 来： 从 Gitea 克隆一个仓库 (Git Clone 命令，填写 Gitea 仓库的 URL)。 在本地工作目录中修改文件。 使用右键菜单将更改的文件添加到暂存区 (add)。 使用右键菜单将暂存区的更改提交到本地仓库 (commit)。 使用右键菜单将本地仓库的提交推送到 Gitea 服务器 (push)。 使用右键菜单从 Gitea 服务器拉取最新代码到本地 (pull)。 通过 show log 查看本地或远程仓库的提交历史。 创建和切换分支以进行并行开发。 在进行 push 或 pull 时，如果出现冲突，使用 TortoiseGit 的工具解决冲突。 通过这种组合，Git 提供了强大的版本控制功能，Gitea 提供了集中的代码托管和协作平台，而 TortoiseGit 则通过易用的 GUI 简化了日常的 Git 操作。这使得个人或小型团队可以方便地搭建自己的代码管理系统。 5. 总结Git、Gitea 和 TortoiseGit 各自扮演着不同的角色，但它们可以有效地结合起来，为您的项目提供 robust 的版本控制解决方案。Git 作为核心引擎，Gitea 提供远程托管和协作功能，而 TortoiseGit 则作为桌面客户端简化了 Windows 用户与 Git&#x2F;Gitea 的交互。通过理解它们的工作原理和基本操作，您可以更好地管理您的代码，提高开发效率。","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://vgtmy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"使用教程","slug":"学习笔记/使用教程","permalink":"https://vgtmy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"git","slug":"git","permalink":"https://vgtmy.github.io/tags/git/"},{"name":"github","slug":"github","permalink":"https://vgtmy.github.io/tags/github/"},{"name":"gitea","slug":"gitea","permalink":"https://vgtmy.github.io/tags/gitea/"},{"name":"TortoiseGit","slug":"TortoiseGit","permalink":"https://vgtmy.github.io/tags/TortoiseGit/"},{"name":"gitee","slug":"gitee","permalink":"https://vgtmy.github.io/tags/gitee/"}]},{"title":"OpenHands应用指南","slug":"OpenHands应用指南","date":"2025-05-25T01:27:38.000Z","updated":"2025-05-25T02:00:22.595Z","comments":true,"path":"2025/05/25/OpenHands应用指南/","permalink":"https://vgtmy.github.io/2025/05/25/OpenHands%E5%BA%94%E7%94%A8%E6%8C%87%E5%8D%97/","excerpt":"欢迎使用 OpenHands（前身为 OpenDevin），这是一个由 AI 提供支持的软件开发代理平台。 OpenHands 代理可以做任何人类开发人员可以做的事情：修改代码、运行命令、浏览 Web、 调用 API，是的，甚至可以从 StackOverflow 复制代码片段。好的，这是一篇根据您提供的资料生成的 OpenHands 应用指南 Markdown 文档。","text":"欢迎使用 OpenHands（前身为 OpenDevin），这是一个由 AI 提供支持的软件开发代理平台。 OpenHands 代理可以做任何人类开发人员可以做的事情：修改代码、运行命令、浏览 Web、 调用 API，是的，甚至可以从 StackOverflow 复制代码片段。好的，这是一篇根据您提供的资料生成的 OpenHands 应用指南 Markdown 文档。 本文档将指导您如何开始使用 OpenHands，包括安装运行、连接语言模型（LLM）并配置 API 密钥，以及一些基本的使用方法和最佳实践。 1. 开始使用系统要求运行 OpenHands 推荐的系统配置包括： 支持 Docker Desktop 的 macOS Linux 支持 WSL 和 Docker Desktop 的 Windows 建议使用配备现代处理器和至少 4GB RAM 的系统。 前置条件确保您的系统已安装 Docker Desktop 并配置正确。 macOS: 安装 Docker Desktop 并确保在 Settings &gt; Advanced 中启用了 Allow the default Docker socket to be used。 Linux: 安装 Docker Desktop。 Windows: 安装 WSL (版本 2) 和 Docker Desktop。确保 Docker Desktop 的 WSL 2 基于引擎已启用，并且启用了与默认 WSL 发行版的集成。注意，Windows 用户需要在 WSL 终端中运行 Docker 命令来启动应用。 启动应用通过 Docker 运行 OpenHands 是最简单的方式。 首先拉取运行时镜像： 1docker pull docker.all-hands.dev/all-hands-ai/runtime:0.39-nikolaik 然后运行 OpenHands Docker 命令： 123456789docker run -it --rm --pull=always \\-e SANDBOX_RUNTIME_CONTAINER_IMAGE=docker.all-hands.dev/all-hands-ai/runtime:0.39-nikolaik \\-e LOG_ALL_EVENTS=true \\-v /var/run/docker.sock:/var/run/docker.sock \\-v ~/.openhands-state:/.openhands-state \\-p 3000:3000 \\--add-host host.docker.internal:host-gateway \\--name openhands-app \\docker.all-hands.dev/all-hands-ai/openhands:0.39 --rm 会在容器退出时自动移除容器 [未在源中，常见 Docker 用法]。 -v ~/.openhands-state:/.openhands-state 将本地状态目录挂载到容器内，用于持久化设置。 -p 3000:3000 将容器的 3000 端口映射到主机的 3000 端口，用于访问 UI。 --add-host host.docker.internal:host-gateway 允许容器通过 host.docker.internal 访问主机网络，这在使用本地服务的 LLM 时很有用。 启动后，您可以通过浏览器访问 http://localhost:3000 来使用 OpenHands。 警告: 如果您在公共网络上运行，请参考强化 Docker 安装指南，通过限制网络绑定和其他安全措施来保护您的部署。默认配置是为了本地开发方便而设计的。可以通过设置 SANDBOX_RUNTIME_BINDING_ADDRESS=127.0.0.1 和修改 -p 端口绑定来限制访问。 您也可以将 OpenHands 连接到本地文件系统，运行脚本化的无头模式（Headless mode），通过交互式命令行界面（CLI Mode）进行交互，或通过 GitHub Action 在带标签的 issue 上运行。 2. 连接语言模型（LLM）与配置 API 密钥OpenHands 使用 LiteLLM 库连接并调用各种 LLM。为了正常工作，它需要一个强大的模型。 配置方法配置 LLM 模型和 API 密钥可以通过以下方式完成： 通过 UI 设置: 首次启动时会看到设置弹窗，或者可以点击 UI 中的设置按钮（齿轮图标）进入设置页面。 在 LLM 标签页下： 选择 LLM Provider（提供商）。 选择 LLM Model（模型）。 输入对应的 API Key。 如果所需模型不在列表中，可以勾选 Advanced（高级）选项。 在高级设置中，使用 Custom Model 文本框手动输入模型名称，通常需要提供商前缀，例如 openai/&lt;model-name&gt; 或 azure/&lt;deployment-name&gt;。 如果提供商要求，还可以指定 Base URL（基本 URL）。 通过环境变量: 在运行 OpenHands 的 Docker 命令时，可以使用 -e 参数设置环境变量来配置 LLM。 常用的环境变量包括： LLM_MODEL：指定要使用的 LLM 模型。 LLM_API_KEY：设置 API 密钥。 LLM_API_VERSION：主要用于 Azure OpenAI，需要设置 API 版本。 LLM_BASE_URL：设置 API 的基本 URL，用于 OpenAI 兼容端点、代理或本地模型。 通过 config.toml 文件: 在开发模式下运行 OpenHands 时，可以在 config.toml 文件中配置 LLM 设置。例如，在 [llm] 部分设置 model 和 ollama_base_url。 支持的提供商和配置示例OpenHands 通过 LiteLLM 支持连接到多种 LLM 提供商： Azure OpenAI: 需要在 Docker 命令中设置 LLM_API_VERSION 环境变量。在 UI 中选择 Azure 提供商，设置 &lt;deployment-name&gt; 为 Custom Model（前缀 azure/），输入 Azure API Base URL 和 API Key。 Google Gemini&#x2F;Vertex: Gemini 可在 UI 中选择 Gemini 提供商，选择或输入模型名称（前缀 gemini/），输入 API Key。Vertex AI 需要设置 GOOGLE_APPLICATION_CREDENTIALS, VERTEXAI_PROJECT, VERTEXAI_LOCATION 环境变量，并在 UI 中选择 VertexAI 提供商，选择或输入模型名称（前缀 vertex_ai/）。 Groq: 可在 UI 中选择 Groq 提供商，选择或输入模型名称（前缀 groq/），输入 API Key。也可作为 OpenAI 兼容端点使用：在 UI 高级设置中，Custom Model 设置为 openai/&lt;model-name&gt;，Base URL 设置为 https://api.groq.com/openai/v1，并输入 Groq API Key。 本地 LLMs: 通常需要先使用 LMStudio、SGLang 或 vLLM 等工具在本地服务模型。然后在 OpenHands UI 高级设置中配置 Custom Model (如 lm_studio/&lt;model-name&gt; 或 openai/&lt;served-model-name&gt;) 和 Base URL (如 http://host.docker.internal:1234/v1 或 http://host.docker.internal:8000)，并输入 API Key (如 dummy 或服务时设置的 key)。请注意，使用本地 LLM 可能功能受限，强烈推荐使用 GPU 服务模型以获得最佳体验。 LiteLLM Proxy: 如果您设置了 LiteLLM Proxy 服务器，可以在 UI 高级设置中配置 Custom Model (前缀 litellm_proxy/)，Base URL 为您的 LiteLLM proxy URL，并输入 LiteLLM proxy API Key。支持的模型取决于您的代理配置。 OpenAI: 在 UI 中选择 OpenAI 提供商，选择或输入模型名称（前缀 openai/），输入 API Key。也可使用 OpenAI 兼容端点或代理：在 UI 高级设置中，Custom Model 设置为 openai/&lt;model-name&gt;，Base URL 为代理 URL，输入 API Key。 OpenRouter: 在 UI 中选择 OpenRouter 提供商，选择或输入模型名称（前缀 openrouter/），输入 API Key。 获取 API 密钥大多数语言模型都需要 API 密钥才能访问，并且通常会产生费用。建议从提供商的官方网站创建账户并生成 API 密钥。为了控制成本，建议设置使用限制并监控用量。例如，Anthropic 和 OpenAI 都提供了生成 API 密钥的流程。 模型推荐根据 SWE-bench 数据集的评估和社区反馈，以下是推荐且经验证可与 OpenHands 配合良好的模型： anthropic/claude-sonnet-4-20250514 (推荐) openai/o4-mini gemini/gemini-2.5-pro deepseek/deepseek-chat all-hands/openhands-lm-32b-v0.1 (通过 OpenRouter 可用) 请注意，OpenHands 的能力很大程度上取决于所使用的 LLM 模型。当前大多数本地和开源模型可能不如这些推荐模型强大，可能导致响应慢、质量差或错误。 API 重试和速率限制LLM 提供商通常有速率限制，有时很低，可能需要重试。OpenHands 在收到速率限制错误 (429 错误码) 时会自动重试请求。您可以通过设置环境变量或在开发模式下的 config.toml 文件中自定义重试次数和等待时间。 3. 交互模式OpenHands 支持多种交互模式： GUI Mode: 通过 web 界面 (http://localhost:3000) 与 OpenHands 交互。这是最直观的方式，提供聊天面板、文件变化、内嵌 VS Code、终端、Jupyter 等功能视图。LLM 配置主要通过 UI 设置完成。 CLI Mode: 提供一个交互式命令行界面，可直接在终端中与 OpenHands 交互。可以使用命令启动对话、查看状态、修改设置等。LLM 设置可以通过 /settings 命令或环境变量、config.toml 文件进行管理。 Headless Mode: 允许您使用单个命令运行 OpenHands，无需启动 web 应用。这适用于编写脚本和自动化任务。配置通常通过环境变量或 config.toml 文件完成。 4. 核心功能概览OpenHands GUI 提供了多个面板帮助您与 AI 代理协作： Chat Panel: 显示用户与 OpenHands 之间的对话，OpenHands 会在此解释其行动。 Changes: 显示 OpenHands 执行的文件更改。 VS Code: 内嵌的 VS Code 编辑器，用于浏览、修改、上传和下载文件。 Terminal: OpenHands 和用户都可以运行终端命令的空间。 Jupyter: 显示 OpenHands 执行的所有 Python 命令，特别适合数据可视化任务。 App: 显示 OpenHands 运行应用程序时的 web 服务器，用户可以与正在运行的应用交互。 Browser: OpenHands 用来浏览网站的非交互式浏览器。 5. 提示词最佳实践提供清晰有效的提示词是获得准确有用响应的关键。 好的提示词的特点: 具体 (Concrete): 清晰描述要添加什么功能或修复什么错误。 位置明确 (Location-specific): 如果知道，请指定代码库中需要修改的位置。 范围适当 (Appropriately scoped): 专注于单个功能，通常不超过 100 行代码。 有效提示词的技巧: 尽可能具体地说明期望的结果或要解决的问题。 提供上下文，包括相关文件路径和行号（如果可用）。 将大型任务分解为更小、更易管理的提示词。 包含相关的错误消息或日志。 如果不明朗，请指定编程语言或框架。 通过保持提示词的精确性和信息量，OpenHands 可以更好地协助您。 6. 仓库定制与微代理（Microagents）您可以通过在仓库根目录创建 .openhands 目录来自定义 OpenHands 与您的仓库的交互方式。 微代理（Microagents）微代理是增强 OpenHands 领域特定知识的专用提示词，提供专家指导、自动化常见任务并确保项目实践的一致性。 微代理类型: 通用微代理 (General Microagents): 为 OpenHands 提供关于仓库的一般性指导。这些微代理总是作为上下文的一部分加载。无需 frontmatter。放置在 .openhands/microagents/repo.md。 关键字触发微代理 (Keyword-Triggered Microagents): 当提示词中包含特定关键字时激活的指导。只有当提示词包含触发词时才会加载。需要 frontmatter 来定义触发词。放置在 .openhands/microagents/&lt;name&gt;.md。 组织和用户微代理 (Organization and User Microagents): 适用于组织或用户拥有的所有仓库的微代理。可以在组织或用户的 .openhands 仓库中创建 microagents 目录来放置这些微代理。 要定制 OpenHands 的行为，在您的仓库根目录创建 .openhands/microagents/ 目录，并在其中添加 &lt;microagent_name&gt;.md 文件。加载的微代理会占用上下文窗口空间，与用户消息一起为 OpenHands 提供任务和环境信息。 设置脚本与 Pre-commit 脚本 设置脚本 (.openhands/setup.sh): 添加此文件，每次 OpenHands 开始处理您的仓库时都会运行。这是安装依赖、设置环境变量等设置任务的理想位置。 Pre-commit 脚本 (.openhands/pre-commit.sh): 添加此文件以创建自定义 git pre-commit hook，在每次提交前运行。可用于强制执行代码质量标准、运行测试等。 7. OpenHands CloudOpenHands Cloud 是 All Hands AI 提供的托管云版本。您可以通过 app.all-hands.dev 访问，需要使用 GitHub 或 GitLab 账户登录。 Cloud 版本提供以下功能： Cloud UI: Web 界面，用于交互。 Cloud API: REST API，允许程序化交互。可以通过 Cloud UI 的设置页面生成 API 密钥。 Cloud Issue Resolver: 自动化代码修复和提供智能协助，尤其是在 GitHub 的 issues 和 pull requests 上。需要通过 GitHub&#x2F;GitLab 集成授予仓库访问权限。 Cloud 版本是开始使用 OpenHands 的最简单方式，新用户提供免费额度。 8. 故障排除与社区 如果您遇到问题，可以查阅故障排除指南。 常见的故障包括 API 密钥无法识别、组织访问被拒绝等，通常需要检查密钥是否正确、是否过期、权限是否正确，以及 SSO 是否启用等。 使用 CLI 模式时，如果遇到权限问题，请确保您的工作区目录受信任且环境变量设置正确。使用高级设置可以进行更深入的 LLM 配置。 OpenHands 是一个社区驱动的项目。您可以通过以下渠道与社区互动： 加入 Slack 工作区（讨论研究、架构和未来开发）。 加入 Discord 服务器（社区运营，用于一般讨论、问题和反馈）。 阅读或提交 GitHub Issues。 要了解更多信息和高级配置选项，请查阅官方文档。","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://vgtmy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"应用指南","slug":"学习笔记/应用指南","permalink":"https://vgtmy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%BA%94%E7%94%A8%E6%8C%87%E5%8D%97/"}],"tags":[{"name":"openhands","slug":"openhands","permalink":"https://vgtmy.github.io/tags/openhands/"},{"name":"OpenDevin","slug":"OpenDevin","permalink":"https://vgtmy.github.io/tags/OpenDevin/"},{"name":"Ai","slug":"Ai","permalink":"https://vgtmy.github.io/tags/Ai/"},{"name":"应用指南","slug":"应用指南","permalink":"https://vgtmy.github.io/tags/%E5%BA%94%E7%94%A8%E6%8C%87%E5%8D%97/"},{"name":"开发平台","slug":"开发平台","permalink":"https://vgtmy.github.io/tags/%E5%BC%80%E5%8F%91%E5%B9%B3%E5%8F%B0/"},{"name":"编程","slug":"编程","permalink":"https://vgtmy.github.io/tags/%E7%BC%96%E7%A8%8B/"},{"name":"StackOverflow","slug":"StackOverflow","permalink":"https://vgtmy.github.io/tags/StackOverflow/"}]},{"title":"Hexo Fluid 主题：安装与设置指南","slug":"Hexo-Fluid-主题：安装与设置指南","date":"2025-05-24T01:25:00.000Z","updated":"2025-05-24T14:01:01.197Z","comments":true,"path":"2025/05/24/Hexo-Fluid-主题：安装与设置指南/","permalink":"https://vgtmy.github.io/2025/05/24/Hexo-Fluid-%E4%B8%BB%E9%A2%98%EF%BC%9A%E5%AE%89%E8%A3%85%E4%B8%8E%E8%AE%BE%E7%BD%AE%E6%8C%87%E5%8D%97/","excerpt":"","text":"Hexo Fluid 主题：安装与设置指南Fluid 是基于 Hexo 的一款 Material Design 风格的主题，由 Fluid-dev 开发与维护。本指南将基于您提供的资料，介绍如何安装和设置 Hexo Fluid 主题。 开始使用：安装主题在开始之前，您需要先搭建好 Hexo 博客。如果您还没有 Hexo 博客，请按照 Hexo 官方文档进行安装和建站。 安装 Fluid 主题有两种主要方式： 方式一：通过 Npm 安装 (推荐，Hexo 5.0.0 及以上版本)进入您的 Hexo 博客目录，执行以下命令： 1npm install --save hexo-theme-fluid 然后在博客目录下创建 _config.fluid.yml 文件，并将主题目录下的 _config.yml 内容复制到新创建的 _config.fluid.yml 文件中。今后，所有主题配置的修改都建议在此文件中进行，以避免主题更新时丢失自定义配置。 方式二：下载 Release 压缩包安装下载 Fluid 主题的最新 Release 版本。解压下载的压缩包到您 Hexo 博客目录下的 themes 文件夹。将解压出的文件夹重命名为 fluid。 注意： 如果您选择此方式安装主题，建议学习使用 覆盖配置 功能，避免在更新主题时丢失自定义配置。对于 Hexo 5.0.0 版本及以上的用户，可以在博客目录下创建 _config.fluid.yml 文件；对于 Hexo 低于 5.0.0 但不低于 3.0.0 的用户，需要在博客目录下的 source/_data 目录（如不存在则创建）中创建 fluid_config.yml 文件。将主题的 _config.yml 内容复制到这些文件中进行修改。 指定主题修改 Hexo 博客目录下的 _config.yml 文件： 12theme: fluid # 指定主题language: zh-CN # 指定语言，会影响主题显示的语言，按需修改 创建「关于页」首次使用主题时，需要手动创建「关于页」。在博客目录下执行命令： 1hexo new page about 创建成功后，修改 /source/about/index.md 文件，添加 layout: about 属性。修改后的文件示例如下： 12345---title: 标题layout: about---这里写关于页的正文，支持 Markdown , HTML 重要提示： layout: about 必须存在，并且不能修改成其他值，否则不会显示头像等样式。 配置主题主题配置可以通过修改 theme/fluid/_config.yml 或站点目录下的 主题配置文件 (_config.fluid.yml 或 source/_data/fluid_config.yml) 来实现。推荐使用后者的覆盖配置方式。本指南提到的“站点配置”指 Hexo 博客目录下的 _config.yml，“主题配置”指 theme/fluid/_config.yml 或 _config.fluid.yml。 几乎每个配置在主题配置文件中都有注释，可配合指南共同参考使用。 全局配置 覆盖配置: 如前所述，通过在站点根目录下创建 _config.fluid.yml (Hexo 5.0.0+) 或在 source/_data/ 下创建 fluid_config.yml (Hexo &lt; 5.0.0)，可以将主题配置放在主题文件夹之外，以便于更新。只要存在于这些覆盖文件中的配置，优先级都高于主题自带的 _config.yml。 静态资源: 可以通过主题配置中的 static_prefix 修改静态资源文件的 URL。 本地搜索: 已集成 hexo-generator-search 插件。默认生成并使用 local-search.xml。 页面顶部大图 (Banner): 主题配置中，每个页面都有 banner_img 属性。可以使用本地图片相对路径（相对于 source 目录，优先使用博客目录下的 source）或外站链接。建议图片大小在 1MB 以内。可以使用 banner_img_height (0-100) 控制高度，banner_mask_alpha (0-1.0) 控制蒙版透明度。 每篇文章可以单独设置 Banner，详见文章页设置。 主题不支持固定背景 (fixed)。 博客标题: 页面左上角的标题默认使用 站点配置 中的 title。如需单独设置，可在 主题配置 中设置 navbar.blog_title。 导航菜单: 在 主题配置 的 navbar.menu 中设置。每个菜单项包含 key (用于语言关联，或直接显示值)、link (跳转链接)、icon (图标 CSS Class，可省略) 和 name (强制显示名称，可省略)。支持二级菜单。 懒加载: 默认开启。开启后，图片或评论插件在滚动到可见范围时才会加载，可提高网页打开速度。可在 主题配置 的 lazyload 项中设置是否启用 (enable)、加载占位图 (loading_img)、是否仅在文章页生效 (onlypost) 和触发加载的偏移倍数 (offset_factor)。 全局字体: 可在 主题配置 的 font 项中设置全局字号 (font_size)、字体族 (font_family) 和代码字号 (code_font_size)。建议使用系统自带字体，并至少添加一个通用字体族名。 网页统计: 支持多种统计服务，如百度统计、Google 统计、腾讯统计、51.la、友盟&#x2F;cnzz、LeanCloud。在 主题配置 的 web_analytics 项中开启并填入相应的 Key 或 ID。 PV 与 UV 统计: 可在页脚展示。支持 LeanCloud 和 不蒜子。在 主题配置 的 footer.statistics 中设置是否启用 (enable)、数据源 (source) 和显示文本格式 (pv_format, uv_format)。 不蒜子无需账号，但有时响应慢。LeanCloud 需要申请账号并填入 API 参数。 语言配置: 在 站点配置 的 language 项中设置。值需要对应主题 languages/ 目录内的文件名。也可以通过在 source/_data/languages 目录下创建相应的 YAML 文件来自定义或新增语言配置。 强制全局 HTTPS: 在 主题配置 中开启 force_https: true 可将所有请求强制升级为 HTTPS。 二级站点路径: 如果博客部署在二级路径（如 xxx.com/blog/），需要修改 站点配置 中的 url 和 root。 自定义 JS &#x2F; CSS &#x2F; HTML: 可在 主题配置 的 custom_js, custom_css, custom_head, custom_html 项中引入自定义代码或文件。custom_js 和 custom_css 支持指定多个路径。 暗色模式: 在 主题配置 的 dark_mode 中开启 enable: true。default 参数可设置默认模式 (auto&#x2F;light&#x2F;dark)。 OpenGraph: 默认开启。可在 主题配置 的 open_graph 项中完善相关信息。也可在文章 front-matter 中设置 og_img 指定单页面的 OpenGraph 图片。 首页设置 Slogan (打字机): 首页大图中的标题文字。可在 主题配置 的 index.slogan 中开启并设置文本。支持通过 API 获取内容。默认开启打字机动效，可在 fun_features.typing 中设置。 文章摘要: 可在 主题配置 的 index.auto_excerpt 中开启&#x2F;关闭自动摘要 (默认开启)。手动指定摘要可通过在正文中使用 &lt;!-- more --&gt; 或在 front-matter 中设置 excerpt 字段。优先级：手动摘要 &gt; 自动摘要。 文章跳转方式: 可在 主题配置 的 index.post_url_target 设置点击文章链接时的跳转方式 (_blank 新标签页, _self 当前标签页)。 文章信息: 可在 主题配置 的 index.post_meta 控制首页文章列表中是否显示发布时间、分类、标签。 隐藏文章: 在文章 front-matter 中设置 hide: true 可使文章不在首页及归档分类页中展示。隐藏后仍可通过链接访问。 归档文章: 在文章 front-matter 中设置 archive: true 可使文章在首页隐藏，但仍在归档分类页中展示。 文章排序 (置顶): 如果安装了 hexo-generator-index &gt;&#x3D; 2.0.0 版本，可在文章 front-matter 中设置 sticky 属性。sticky 数值越大，文章越靠前。可通过 主题配置 的 index.post_sticky 控制是否显示置顶图标。 文章页设置 文章在首页的封面图: 在文章 front-matter 中设置 index_img。支持本地图片路径 (相对于 source 目录) 或外链。可在 主题配置 的 post.default_index_img 设置默认封面图。 文章页顶部大图: 默认显示主题配置中的 post.banner_img。可在文章 front-matter 中指定 banner_img 设置单篇文章的顶部大图。 文章内容图片: 本地图片存放位置（相对于 source 目录）同上。 日期&#x2F;字数&#x2F;阅读时长&#x2F;阅读数: 显示在文章页大标题下方。可在 主题配置 的 post.meta 中开启&#x2F;关闭作者 (author)、日期 (date)、字数统计 (wordcount)、阅读时间 (min2read) 和阅读次数 (views)。阅读次数支持 LeanCloud 或 不蒜子。日期格式需遵循 ISO-8601 规范。 代码块: 可在 主题配置 的 code 中设置是否开启复制按钮 (copy_btn)、行号 (line_number)、代码高亮 (highlight) 及选择高亮库 (lib，支持 highlightjs 和 prismjs)。 评论: 在 主题配置 的 post.comments 中开启 enable: true 并指定 type。下方需设置对应评论模块的参数。主题支持多种评论插件，如 Valine, Waline, Gitalk, Disqus 等。可在文章或自定义页面 front-matter 中设置 comment: bool 或 comment: &#39;type&#39; 控制评论开关。 脚注: 主题内置脚注语法支持。可在 主题配置 的 post.footnote 中开启 (enable: true)。支持在文末生成带锚点的脚注。 Tag 插件: 主题内置多种 Tag 插件，如便签 (&#123;% note %&#125;), 行内标签 (&#123;% label %&#125;), 折叠块 (&#123;% fold %&#125;), 勾选框 (&#123;% cb %&#125;), 按钮 (&#123;% btn %&#125;) 和组图 (&#123;% gi %&#125;)。 LaTeX 数学公式: 手动开启。需在 主题配置 的 post.math 中开启 (enable: true)，可设置是否按需加载 (specific) 和选择引擎 (engine，支持 mathjax 或 katex)。同时需要更换 Markdown 渲染器（如 hexo-renderer-pandoc + Pandoc for mathjax, 或 hexo-renderer-markdown-it + @traptitech&#x2F;markdown-it-katex for katex）。完成后需执行 hexo clean。 Mermaid 流程图: 手动开启。需在 主题配置 的 post.mermaid 中开启 (enable: true)，可设置是否按需加载 (specific) 和配置选项 (options)。支持内置 Tag 或代码块书写。 其他页面 归档页&#x2F;分类页&#x2F;标签页: 具体配置见主题配置文件注释。标签页支持词云展示。 关于页: 前面已介绍创建方法。可在 主题配置 的 about 项中设置关于信息 (头像 avatar, 姓名 name, 简介 intro) 和社交图标 (icons)。社交图标可设置链接或二维码。 友情链接页: 默认关闭。需先在 navbar.menu 中开启 links 菜单项，然后在 links 配置项中设置友情链接列表 (items)。支持自定义区域和评论。 自定义页面: 可通过 hexo new page example 创建。可在 front-matter 或 主题配置 的 page 项中进行配置。自定义页面评论通过 front-matter 控制。如果需要与文章页功能相似的自定义页面，建议使用 _posts 并配合隐藏文章功能。 404 页: 访问不存在的链接时显示。需要在部署环境上配置 (如 Nginx 的 error_page 404)。GitHub Pages 需绑定顶级域名才生效。主题包含默认 404 页面，也可在 source 目录下放置自定义的 404.html。 更新主题根据您的安装方式，有不同的更新方法： Npm 安装: 在博客目录下执行 npm update --save hexo-theme-fluid。 Release 压缩包安装 (未修改代码): 将原文件夹重命名备份，重新下载最新 Release 并解压重命名为 fluid。根据更新说明同步修改您的覆盖配置文件 (_config.fluid.yml 或 source/_data/fluid_config.yml)。 自定义代码或体验其他分支: 确保 Fluid 目录开启 git 且所有改动已 commit。拉取对应分支的代码（如 dev 分支）：git pull https://github.com/fluid-dev/hexo-theme-fluid.git develop。解决代码冲突。 其他 高级用法: 主题提供了 Fluid 代码注入功能，相比 Hexo 内置注入器，支持注入 ejs 代码，更细致丰富。可在博客目录 scripts 文件夹下创建 JS 文件，使用 hexo.extend.filter.register(&#39;theme_inject&#39;, ...) 来实现。 Hexo 插件: 您提供的资料列出了一些推荐的 Hexo 插件，例如 hexo-all-minifier (压缩文件)、hexo-abbrlink (生成永久链接)、live2d-widget (看板娘) 等。请注意，所有插件仅作为推荐，不能保证完全与 Fluid 兼容，请仔细阅读插件文档。 加快网页加载: 推荐使用 OSS (对象存储服务) 托管博客静态文件。对于本地图片，建议搭配 hexo-all-minifier 插件进行压缩；对于外部图片，建议使用 tinypng 等工具压缩。 提示: 每次无论是 hexo g (生成) 或 hexo s (本地服务)，都最好先使用 hexo clean 清除本地缓存，以避免奇怪的问题。 希望这篇指南能帮助您更好地安装和设置 Hexo Fluid 主题！","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://vgtmy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://vgtmy.github.io/tags/hexo/"},{"name":"主题","slug":"主题","permalink":"https://vgtmy.github.io/tags/%E4%B8%BB%E9%A2%98/"},{"name":"fluid","slug":"fluid","permalink":"https://vgtmy.github.io/tags/fluid/"}]},{"title":"人工智能个人应用：开启智能生活新时代","slug":"人工智能个人应用","date":"2025-05-23T06:09:52.000Z","updated":"2025-05-24T14:01:01.197Z","comments":true,"path":"2025/05/23/人工智能个人应用/","permalink":"https://vgtmy.github.io/2025/05/23/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%AA%E4%BA%BA%E5%BA%94%E7%94%A8/","excerpt":"在当今数字化飞速发展的时代，人工智能（AI）已不再是科幻电影中的概念，而是逐渐渗透到我们日常生活的方方面面，为普通人的生活带来了诸多便利和改变。从清晨被智能闹钟以最佳睡眠周期唤醒，到晚上通过语音助手关灯入睡，AI 技术正在以惊人的速度重塑我们的生活方式。以下将详细介绍人工智能在个人生活中的多种应用场景。","text":"在当今数字化飞速发展的时代，人工智能（AI）已不再是科幻电影中的概念，而是逐渐渗透到我们日常生活的方方面面，为普通人的生活带来了诸多便利和改变。从清晨被智能闹钟以最佳睡眠周期唤醒，到晚上通过语音助手关灯入睡，AI 技术正在以惊人的速度重塑我们的生活方式。以下将详细介绍人工智能在个人生活中的多种应用场景。 智能个人助理：生活与工作的得力帮手智能个人助理是人工智能在个人应用中最为常见的形式之一。像苹果的 Siri、亚马逊的 Alexa、谷歌的 Google Assistant 以及国内的小爱同学等，它们已经成为人们日常生活中的重要助手。这些智能助理通过语音识别和自然语言处理技术，能够理解人类的自然语言，提供日常生活中的协助。 从设定闹钟、查询天气、播放音乐到发送短信等基础日常任务，用户只需简单地说出指令，智能助理就能迅速响应并完成。例如，当你在忙碌的工作中想要安排一个会议时，只需对智能助理说：“帮我安排明天下午三点的会议。”助手会自动为你检查日历并设置提醒，节省了大量时间。 除了基础功能，智能个人助理在设备控制、日程管理和信息检索方面也具有进阶功能。用户可以要求它们在智能家居系统中调整温度、控制灯光、管理家庭安全系统等。随着人工智能的不断进步，它们的理解能力和功能也在不断增强。此外，一些智能个人助理还具备学习用户习惯和偏好的能力，会根据用户的日常使用行为，调整自己的服务方式和提供的信息优先级，为用户提供更加个性化的服务。 在工作场景中，智能个人助理同样发挥着重要作用。它们可以协助用户管理日程安排，提醒重要的会议、任务截止日期等。对于需要处理大量文档和数据的工作，个人助手可以帮助用户快速检索和整理相关信息，提高工作效率。例如，在一个项目团队中，成员们可以通过与个人助手交互，快速获取项目文档中的关键信息，避免了在大量文件中手动查找的繁琐过程。 个性化推荐系统：精准满足个人需求个性化推荐系统几乎已经遍布于所有的数字产品和在线服务中，无论是在线购物、音乐、视频流媒体还是社交网络，人工智能都能分析用户的浏览和购买历史、评价反馈和搜索习惯，从而推送个性化的内容和产品。 在在线购物领域，电商平台如淘宝和京东利用 AI 技术分析用户的购物习惯，推荐合适的商品。这不仅提升了购物体验，也帮助用户找到更符合自己需求的产品。例如，当你在淘宝上浏览过某类商品后，平台会根据你的浏览记录和偏好，为你推荐相关的商品，让你在海量的商品中快速找到自己心仪的物品。 在音乐和视频流媒体平台，如 Spotify 和 Netflix，个性化推荐系统根据用户的收听和观看历史，为用户推荐可能喜欢的音乐和电影。这种个性化的体验使得用户能够更轻松地发现新内容，节省了用户在寻找感兴趣内容时的时间和精力。例如，当你在 Netflix 上观看了一部某类型的电影后，平台会为你推荐同类型或相关题材的其他电影，让你不断发现新的精彩。 智能家居设备：打造舒适便捷的居住环境智能家居设备的快速发展已经改变了传统家居护理和管理方式。从智能照明、智能恒温器到安防系统、智能冰箱等，AI 技术让家居设备变得更加自动化和智能化。 用户可以通过智能手机应用程序、语音指令甚至是手势来控制这些设备，极大提升了生活质量和舒适度。例如，智能恒温器可以根据家庭成员的习惯和偏好自动调节家中的温度，当你在下班回家的路上，通过手机应用提前打开空调，一进家门就能享受到凉爽的空气。智能照明系统则能根据自然光线变化和人所在位置自动调节亮度和色温，为你营造一个舒适的居住环境。 智能家居的安防系统也得到了极大的提升。智能安防摄像头利用面部识别技术，能够识别家中的访客并实时推送警报通知给用户。门窗传感器可以监测门窗的开关状态，一旦发现异常情况，会及时向用户发出警报，保障家庭的安全。 健康监测应用是另一项受到广泛欢迎的 AI 应用。借助智能手表、健康追踪器和相关的移动应用程序，人们可以实时监控自己的健康状况，如心率、活动水平、睡眠质量和卡路里消耗等。这些设备不仅提供了个人健康数据，而且能通过 AI 分析给出健康建议和预警。 例如，智能手表可以实时监测用户的心率，当心率出现异常时，会及时提醒用户，并根据数据分析给出可能的原因和建议，如是否需要休息、就医等。一些先进的健康监测应用还可以通过分析语音、面部表情和打字模式来评估用户的心理状态，为用户提供更全面的健康关怀。 此外，AI 在医疗诊断领域也发挥着重要作用。一些 AI 系统能够处理和分析大量医疗数据，协助医生在影像诊断上识别疾病迹象。例如，AI 可以通过分析肺部 CT 图像，帮助医生更准确地诊断肺癌等疾病，提高了医疗诊断的效率和准确性。 汽车行业正在经历一场由 AI 驱动的革命，其中最为人们所瞩目的便是自动驾驶车辆。这些车辆能够通过集成的传感器、摄像头和先进的算法来感知周围环境，并做出驾驶决策。 虽然目前自动驾驶汽车还未完全成熟并普及，但是在特定环境下，如特斯拉 Autopilot 的部分自动驾驶功能已经被证明可以增加驾驶安全和便利性。自动驾驶车辆可以减少人为驾驶错误，降低交通事故的风险，同时还能优化路线选择，提高通勤效率。随着人工智能和机器学习技术的不断进步，未来的自动驾驶汽车有望实现完全无人驾驶，从而彻底改变人们的出行方式。 AI 在游戏和娱乐领域也扮演着越来越重要的角色。在视频游戏中，AI 被用来创建智能和逼真的非玩家角色（NPC）以及动态游戏环境。AI 驱动的 NPC 不仅让游戏世界更加生动逼真，还能根据玩家的行为动态调整策略，增加游戏的挑战性和趣味性。 例如，在大型角色扮演游戏中，NPC 不再是简单的对话机器，而是可以根据玩家的行为和选择做出多样化的反应，甚至能够与玩家建立起一定的情感联系。此外，AI 还被应用在电影特效制作、虚拟现实（VR）和增强现实（AR）技术中，为用户提供沉浸式的体验。通过 AI 技术，娱乐体验得到了前所未有的个性化和沉浸感。 AI 技术正在彻底改变传统教育模式。智能教育平台能够根据每个学生的学习能力、知识掌握程度和学习风格，定制完全个性化的学习路径和内容。语言学习 APP 利用 AI 语音识别和自然语言处理技术，提供实时发音纠正和对话练习；数学学习软件则能识别学生的思维过程，精准定位知识盲点。 更令人振奋的是，AI 虚拟教师可以 24 小时在线解答问题，打破了时间和空间的限制，使优质教育资源得以普惠。例如，一些在线教育平台利用 AI 技术，自动评估学生的学习进度，并根据他们的弱点推送相关的练习题或学习资源，帮助学生更好地掌握知识。 在交通与出行方面，AI 也发挥着重要作用。智能导航应用如谷歌地图、高德地图等，依赖 AI 优化路线，结合卫星图像与用户行为预测拥堵，甚至标记自行车道等细节，为用户提供更准确、更便捷的出行路线规划。此外，AI 支持的公共交通调度系统通过精确预测和实时调整，降低了拥堵，并提高了公共服务水平。 在金融与投资领域，AI 技术也得到了广泛应用。银行利用 AI 实现支票拍照存入、签名比对，反欺诈系统可实时监测异常交易，风险识别准确率远超人工。AI 算法能够预测股票市场的走势，为投资者提供投资建议。同时，一些智能理财工具可以根据用户的财务状况和目标，为用户制定个性化的理财计划，帮助用户实现财务目标。 对于博主和内容创作者来说，人工智能工具可以极大地提升创作效率。像 ChatGPT 这样的 AI 文本生成工具，可以帮助用户快速生成文章草稿、创意点子和社交媒体内容。通过与 AI 的互动，创作者可以获得灵感并优化他们的写作。此外，图像生成工具如 DALL - E 和 Canva 也能帮助用户快速制作图像和设计，减少了设计过程中的时间和成本。这些工具使得普通人能够以更低的门槛进行创作，表达自己的想法。 综上所述，人工智能已经深入到我们生活的各个方面，从智能个人助理到智能家居，从健康监测到游戏娱乐，AI 的应用无处不在。这些应用不仅提高了我们的生活质量，还极大地促进了社会的进步与发展。随着技术的不断进步和创新，相信人工智能在个人应用领域将会有更多的突破和发展，为我们带来更加智能、便捷、美好的生活。","categories":[{"name":"科技、读书笔记","slug":"科技、读书笔记","permalink":"https://vgtmy.github.io/categories/%E7%A7%91%E6%8A%80%E3%80%81%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"人工智能","slug":"人工智能","permalink":"https://vgtmy.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"},{"name":"个人应用","slug":"个人应用","permalink":"https://vgtmy.github.io/tags/%E4%B8%AA%E4%BA%BA%E5%BA%94%E7%94%A8/"},{"name":"AI","slug":"AI","permalink":"https://vgtmy.github.io/tags/AI/"}]},{"title":"智蕴年华，行摄人生","slug":"智蕴年华，行摄人生","date":"2025-05-04T07:49:39.000Z","updated":"2025-05-24T14:01:01.197Z","comments":true,"path":"2025/05/04/智蕴年华，行摄人生/","permalink":"https://vgtmy.github.io/2025/05/04/%E6%99%BA%E8%95%B4%E5%B9%B4%E5%8D%8E%EF%BC%8C%E8%A1%8C%E6%91%84%E4%BA%BA%E7%94%9F/","excerpt":"智蕴年华，猎奇不倦。行摄人生，笔耕不渝。","text":"智蕴年华，猎奇不倦。行摄人生，笔耕不渝。 我，生于六零年代，就读于武汉，在一个江南小城市工作了30多年。工作生活都很平淡，过两年就要退休了。 为了让退休生活不至于枯燥无味，我现在开始学习写博客。年纪大了，学什么都难，这博客就当是我的学习笔记和心得。写得不好，请多赐教！ 如果您也有类似的经历或兴趣，欢迎留言分享，我们一起交流学习！","categories":[{"name":"自我介绍","slug":"自我介绍","permalink":"https://vgtmy.github.io/categories/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/"}],"tags":[{"name":"导航","slug":"导航","permalink":"https://vgtmy.github.io/tags/%E5%AF%BC%E8%88%AA/"},{"name":"分享","slug":"分享","permalink":"https://vgtmy.github.io/tags/%E5%88%86%E4%BA%AB/"}]},{"title":"Git常用命令使用大全","slug":"Git常用命令使用大全","date":"2025-05-03T11:17:22.000Z","updated":"2025-05-24T14:01:01.197Z","comments":true,"path":"2025/05/03/Git常用命令使用大全/","permalink":"https://vgtmy.github.io/2025/05/03/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E5%A4%A7%E5%85%A8/","excerpt":"","text":"一、查看、添加、提交、删除、找回，重置修改文件 git help &lt;command&gt; # 显示 command 的 help git show # 显示某次提交的内容 git show $id git co -- &lt;file&gt; # 抛弃工作区修改 git co . # 抛弃工作区修改 git add &lt;file&gt; # 将工作文件修改提交到本地暂存区 git add . # 将所有修改过的工作文件提交暂存区 git rm &lt;file&gt; # 从版本库中删除文件 git rm &lt;file&gt; --cached # 从版本库中删除文件，但不删除文件 git reset &lt;file&gt; # 从暂存区恢复到工作文件 git reset -- . # 从暂存区恢复到工作文件 git reset --hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改 git ci &lt;file&gt; git ci . git ci -a # 将 git add、git rm 和 git ci 等操作合并在一起 git ci -am &quot;some comments&quot; git ci --amend # 修改最后一次提交记录 git revert &lt;id&gt; # 恢复某次提交的状态，恢复动作本身也创建次提交对象 git revert HEAD # 恢复最后一次提交的状态 二、查看文件 diff git diff &lt;file&gt; # 比较当前文件和暂存区文件差异 git diff &lt;id1&gt; &lt;id2&gt; # 比较两次提交之间的差异 git diff &lt;branch1&gt;..&lt;branch2&gt; # 在两个分支之间比较 git diff --staged # 比较暂存区和版本库差异 git diff --cached # 比较暂存区和版本库差异 git diff --stat # 仅仅比较统计信息 查看提交记录 git log git log &lt;file&gt; # 查看该文件每次提交记录 git log -p &lt;file&gt; # 查看每次详细修改内容的 diff git log -p -2 # 查看最近两次详细修改内容的 diff git log --stat # 查看提交统计信息 tig # Mac 上可以使用 tig 代替 diff 和 log，brew install tig 三、Git 本地分支管理1. 查看、切换、创建和删除分支 git br -r # 查看远程分支 git br &lt;new_branch&gt; # 创建新的分支 git br -v # 查看各个分支最后提交信息 git br --merged # 查看已经被合并到当前分支的分支 git br --no-merged # 查看尚未被合并到当前分支的分支 git co &lt;branch&gt; # 切换到某个分支 git co -b &lt;new_branch&gt; # 创建新的分支，并且切换过去 git co -b &lt;new_branch&gt; &lt;branch&gt; # 基于 branch 创建新的 new_branch git co $id # 把某次历史提交记录 checkout 出来，但无分支信息，切换到其他分支会自动删除 git co $id -b &lt;new_branch&gt; # 把某次历史提交记录 checkout 出来，创建成一个分支 git br -d &lt;branch&gt; # 删除某个分支 git br -D &lt;branch&gt; # 强制删除某个分支 (未被合并的分支被删除的时候需要强制) 2. 分支合并和 rebase git merge &lt;branch&gt; # 将 branch 分支合并到当前分支 git merge origin/master --no-ff # 不要 Fast-Foward 合并，这样可以生成 merge 提交 git rebase master &lt;branch&gt; # 将 master rebase 到 branch，相当于：git co &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge &lt;branch&gt; 四、Git 补丁管理 (方便在多台机器上开发同步时用) git diff &gt; ../sync.patch # 生成补丁 git apply ../sync.patch # 打补丁 git apply --check ../sync.patch # 测试补丁能否成功 五、Git 暂存管理 git stash # 暂存 git stash list # 列所有 stash git stash apply # 恢复暂存的内容 git stash drop # 删除暂存区 六、Git 远程分支管理 git pull # 抓取远程仓库所有分支更新并合并到本地 git pull --no-ff # 抓取远程仓库所有分支更新并合并到本地，不要快进合并 git fetch origin # 抓取远程仓库更新 git merge origin/master # 将远程主分支合并到本地当前分支 git co --track origin/branch # 跟踪某个远程分支创建相应的本地分支 git co -b &lt;local_branch&gt; origin/&lt;remote_branch&gt; # 基于远程分支创建本地分支，功能同上 git push # push 所有分支 git push origin master # 将本地主分支推到远程主分支 git push -u origin master # 将本地主分支推到远程 (如无远程主分支则创建，用于初始化远程仓库) git push origin &lt;local_branch&gt; # 创建远程分支，origin 是远程仓库名 git push origin &lt;local_branch&gt;:&lt;remote_branch&gt; # 创建远程分支 git push origin :&lt;remote_branch&gt; # 先删除本地分支 (git br -d &lt;branch&gt;)，然后再 push 删除远程分支 七、Git 远程仓库管理 git remote -v # 查看远程服务器地址和仓库名称 git remote show origin # 查看远程服务器仓库状态 git remote add origin git@github:robbin/robbin_site.git # 添加远程仓库地址 git remote set-url origin git@github.com:robbin/robbin_site.git # 设置远程仓库地址 (用于修改远程仓库地址) git remote rm &lt;repository&gt; # 删除远程仓库 八、创建远程仓库 git clone --bare robbin_site robbin_site.git # 用带版本的项目创建纯版本仓库 scp -r my_project.git git@git.csdn.net:~ # 将纯仓库上传到服务器上 mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git --bare init # 在服务器创建纯仓库 git remote add origin git@github.com:robbin/robbin_site.git # 设置远程仓库地址 git push -u origin master # 客户端首次提交 git push -u origin develop # 首次将本地 develop 分支提交到远程 develop 分支，并且 track git remote set-head origin master # 设置远程仓库的 HEAD 指向 master 分支 九、也可以命令设置跟踪远程库和本地库 git branch --set-upstream master origin/master git branch --set-upstream develop origin/develop","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://vgtmy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"导航","slug":"导航","permalink":"https://vgtmy.github.io/tags/%E5%AF%BC%E8%88%AA/"},{"name":"分享","slug":"分享","permalink":"https://vgtmy.github.io/tags/%E5%88%86%E4%BA%AB/"}]},{"title":"世界，您好！","slug":"hello-world","date":"2025-05-01T02:00:00.000Z","updated":"2025-05-24T14:01:01.197Z","comments":true,"path":"2025/05/01/hello-world/","permalink":"https://vgtmy.github.io/2025/05/01/hello-world/","excerpt":"五一劳动节 · 阳光灿烂的清晨愿阳光洒满世界，愿和平常驻人间。","text":"五一劳动节 · 阳光灿烂的清晨愿阳光洒满世界，愿和平常驻人间。 今天是五一劳动节，阳光洒满大地，万物在光影中苏醒。微风轻拂面庞，仿佛是大自然温柔的问候。站在这个春意盎然的日子里，我想对这个世界郑重地说一声： “世界 您好！”生活是一首缓缓流淌的诗，每一个平凡的日子都蕴藏着无数细微的幸福。看见街头忙碌的人群，听见孩童清脆的笑声，感受阳光洒在身上的温度，我由衷地感谢这一切。劳动让世界充满秩序与希望，而 和平，让这一切得以延续。 我热爱这宁静美好的时光，也珍惜那些被岁月温柔包裹的瞬间。在这个特别的节日里，我祈愿： ✨ 愿世界远离纷争 ✨ 愿人们携手向善 ✨ 愿和平如阳光一般，照进每一个角落 世界，您好！请继续包容我们这些渺小却热爱生命的灵魂，让我们在温暖中前行，在和平中生活，在希望中成长。 愿阳光洒满世界，愿和平常驻人间!","categories":[{"name":"随笔","slug":"随笔","permalink":"https://vgtmy.github.io/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"劳动节","slug":"劳动节","permalink":"https://vgtmy.github.io/tags/%E5%8A%B3%E5%8A%A8%E8%8A%82/"},{"name":"生活","slug":"生活","permalink":"https://vgtmy.github.io/tags/%E7%94%9F%E6%B4%BB/"},{"name":"和平","slug":"和平","permalink":"https://vgtmy.github.io/tags/%E5%92%8C%E5%B9%B3/"}]}],"categories":[{"name":"学习心得","slug":"学习心得","permalink":"https://vgtmy.github.io/categories/%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://vgtmy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"使用教程","slug":"学习笔记/使用教程","permalink":"https://vgtmy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"name":"应用指南","slug":"学习笔记/应用指南","permalink":"https://vgtmy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%BA%94%E7%94%A8%E6%8C%87%E5%8D%97/"},{"name":"科技、读书笔记","slug":"科技、读书笔记","permalink":"https://vgtmy.github.io/categories/%E7%A7%91%E6%8A%80%E3%80%81%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"name":"自我介绍","slug":"自我介绍","permalink":"https://vgtmy.github.io/categories/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/"},{"name":"随笔","slug":"随笔","permalink":"https://vgtmy.github.io/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://vgtmy.github.io/tags/hexo/"},{"name":"阿里云","slug":"阿里云","permalink":"https://vgtmy.github.io/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"},{"name":"GitHub","slug":"GitHub","permalink":"https://vgtmy.github.io/tags/GitHub/"},{"name":"博客","slug":"博客","permalink":"https://vgtmy.github.io/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"自动部署","slug":"自动部署","permalink":"https://vgtmy.github.io/tags/%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"},{"name":"CI/CD","slug":"CI-CD","permalink":"https://vgtmy.github.io/tags/CI-CD/"},{"name":"Https","slug":"Https","permalink":"https://vgtmy.github.io/tags/Https/"},{"name":"git","slug":"git","permalink":"https://vgtmy.github.io/tags/git/"},{"name":"github","slug":"github","permalink":"https://vgtmy.github.io/tags/github/"},{"name":"gitea","slug":"gitea","permalink":"https://vgtmy.github.io/tags/gitea/"},{"name":"TortoiseGit","slug":"TortoiseGit","permalink":"https://vgtmy.github.io/tags/TortoiseGit/"},{"name":"gitee","slug":"gitee","permalink":"https://vgtmy.github.io/tags/gitee/"},{"name":"openhands","slug":"openhands","permalink":"https://vgtmy.github.io/tags/openhands/"},{"name":"OpenDevin","slug":"OpenDevin","permalink":"https://vgtmy.github.io/tags/OpenDevin/"},{"name":"Ai","slug":"Ai","permalink":"https://vgtmy.github.io/tags/Ai/"},{"name":"应用指南","slug":"应用指南","permalink":"https://vgtmy.github.io/tags/%E5%BA%94%E7%94%A8%E6%8C%87%E5%8D%97/"},{"name":"开发平台","slug":"开发平台","permalink":"https://vgtmy.github.io/tags/%E5%BC%80%E5%8F%91%E5%B9%B3%E5%8F%B0/"},{"name":"编程","slug":"编程","permalink":"https://vgtmy.github.io/tags/%E7%BC%96%E7%A8%8B/"},{"name":"StackOverflow","slug":"StackOverflow","permalink":"https://vgtmy.github.io/tags/StackOverflow/"},{"name":"主题","slug":"主题","permalink":"https://vgtmy.github.io/tags/%E4%B8%BB%E9%A2%98/"},{"name":"fluid","slug":"fluid","permalink":"https://vgtmy.github.io/tags/fluid/"},{"name":"人工智能","slug":"人工智能","permalink":"https://vgtmy.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"},{"name":"个人应用","slug":"个人应用","permalink":"https://vgtmy.github.io/tags/%E4%B8%AA%E4%BA%BA%E5%BA%94%E7%94%A8/"},{"name":"AI","slug":"AI","permalink":"https://vgtmy.github.io/tags/AI/"},{"name":"导航","slug":"导航","permalink":"https://vgtmy.github.io/tags/%E5%AF%BC%E8%88%AA/"},{"name":"分享","slug":"分享","permalink":"https://vgtmy.github.io/tags/%E5%88%86%E4%BA%AB/"},{"name":"劳动节","slug":"劳动节","permalink":"https://vgtmy.github.io/tags/%E5%8A%B3%E5%8A%A8%E8%8A%82/"},{"name":"生活","slug":"生活","permalink":"https://vgtmy.github.io/tags/%E7%94%9F%E6%B4%BB/"},{"name":"和平","slug":"和平","permalink":"https://vgtmy.github.io/tags/%E5%92%8C%E5%B9%B3/"}]}